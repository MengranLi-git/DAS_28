library(kableExtra)
load("../Data.Rdata")
fit <- lm(Satisfaction ~ ., data = na.omit(Data[, -1]))
tidy(fit) %>% kable()
fit <- lm(Satisfaction ~ ., data = na.omit(Data[, -1]))
tidy(fit) %>%
filter(-term %in% c("DateCode2012","DateCode2014","DateCode2015",
"DateCode2016","DateCode2017","DateCode2018")) %>%
kable()
fit <- lm(Satisfaction ~ ., data = na.omit(Data[, -1]))
tidy(fit) %>%
filter(term !%in% c("DateCode2012","DateCode2014","DateCode2015",
fit <- lm(Satisfaction ~ ., data = na.omit(Data[, -1]))
tidy(fit) %>%
filter(!term %in% c("DateCode2012","DateCode2014","DateCode2015",
"DateCode2016","DateCode2017","DateCode2018")) %>%
kable()
fit2 <- lm(Satisfaction ~ DateCode + Cards + Repair + Work_Bus +
School + Health + Work_Train + Train_Stations + Without_Car +
Petrol_Diesel, data = na.omit(Data[, -1]))
tidy(fit2) %>%
filter(!term %in% c("DateCode2012","DateCode2014","DateCode2015",
"DateCode2016","DateCode2017","DateCode2018")) %>%
kable()
par(mfrow = c(2, 2), mar=c(0.5,0.5,0.5,0.5))
plot(fit)
par(mfrow = c(2, 2), mar=c(1,0.5,0.5,0.5))
plot(fit)
par(mfrow = c(2, 2), mar=c(1,1,1,1))
plot(fit)
par(mfrow = c(2, 2), mar=c(1.5,1.5,1.5,1.5))
plot(fit)
knitr::write_bib(c('knitr','rmarkdown','posterdown','pagedown'), 'packages.bib')
knitr::write_bib(c('knitr','rmarkdown','posterdown','pagedown'), 'packages.bib')
knitr::write_bib(c('knitr','rmarkdown','posterdown','pagedown'), 'packages.bib')
knitr::opts_chunk$set(echo = FALSE, eval = TRUE, warning = FALSE, message = FALSE, comment = NA)
library(tidyverse)
library(moderndive)
library(skimr)
library(kableExtra)
library(gridExtra)
library(fs)
library(tidymodels)
library(GGally)
library(car)
library(gvlma)
library(skimr)
library(kableExtra)
# set data path
setwd("~/Downloads/DAS_28-main 2")
# set data path
data_dir <- "data"
# read data document name
csv_files <- fs::dir_ls(data_dir, regexp = "\\.csv$")
# dataset name
dataset_name <- c(
"Casualties", "Expenditure", "Transport",
"Vehicles", "Cards", "Network", "Purposes"
)
# read data and assign names to dataset
for (i in 1:7) {
assign(dataset_name[i], readr::read_csv(csv_files[i]))
}
#### data wrangling ####
# select total number of casualty outcomes
Casualties <- Casualties %>%
select(-c(Measurement, Units)) %>%
filter(Outcome == "Killed Or Seriously Injured") %>%
spread(Outcome, Value) %>%
filter(Age == "All" & Gender == "All") %>%
select(-c(Age, Gender))
# rename variable name
Expenditure <- Expenditure %>%
select(-c(Measurement, Units)) %>%
rename(Expenditure = Value)
# remove variables at the whole Scotland level
Transport <- Transport %>%
select(-c(Measurement, Units)) %>%
filter(`Indicator (public transport)` %in% c(
"Number Of Passenger Train Stations",
"Percentage Of Adults Reporting that they are Very or Fairly Satisfied with Public Transport"
)) %>%
spread(`Indicator (public transport)`, Value)
Vehicles <- Vehicles %>%
select(-c(Measurement, Units)) %>%
spread(`Indicator (road vehicles)`, Value)
# retain card numbers of all people
Cards <- Cards %>%
select(-c(Measurement, Units)) %>%
spread(Age, Value) %>%
select(-`60 years and over`) %>%
rename(Cards = All)
Network <- Network %>%
select(-c(Measurement, Units)) %>%
spread(`Indicator (road network traffic)`, Value)
Purposes <- Purposes %>%
select(-c(Measurement, Units)) %>%
spread(`Indicator (travel to work)`, Value)
# merge all dataset into one complete dataset by 'FeatureCode' and 'DateCode'
Data <- Expenditure %>%
left_join(Casualties,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Cards,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Network,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Purposes,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Transport,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Vehicles,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
)
# rename variables
names(Data) <- c(
"FeatureCode", "DateCode", "Expenditure", "Killed_Injured",
"Cards", "Congestion", "Repair", "Mileage", "Work_Bus",
"Business", "School", "Commuting", "Work_Cycling", "Education",
"Health", "Shopping", "Work_Train", "Work_Walking", "Train_Stations",
"Satisfaction", "One_Car", "More_Car", "Without_Car", "Petrol_Diesel"
)
glimpse(Data)
# Transform the DateCode as a factor
Data$DateCode <- as.factor(Data$DateCode)
# set data path
data_dir <- "data"
# read data document name
csv_files <- fs::dir_ls(data_dir, regexp = "\\.csv$")
# dataset name
dataset_name <- c(
"Casualties", "Expenditure", "Transport",
"Vehicles", "Cards", "Network", "Purposes"
)
# read data and assign names to dataset
for (i in 1:7) {
assign(dataset_name[i], readr::read_csv(csv_files[i]))
}
#### data wrangling ####
# select total number of casualty outcomes
Casualties <- Casualties %>%
select(-c(Measurement, Units)) %>%
filter(Outcome == "Killed Or Seriously Injured") %>%
spread(Outcome, Value) %>%
filter(Age == "All" & Gender == "All") %>%
select(-c(Age, Gender))
# rename variable name
Expenditure <- Expenditure %>%
select(-c(Measurement, Units)) %>%
rename(Expenditure = Value)
# remove variables at the whole Scotland level
Transport <- Transport %>%
select(-c(Measurement, Units)) %>%
filter(`Indicator (public transport)` %in% c(
"Number Of Passenger Train Stations",
"Percentage Of Adults Reporting that they are Very or Fairly Satisfied with Public Transport"
)) %>%
spread(`Indicator (public transport)`, Value)
Vehicles <- Vehicles %>%
select(-c(Measurement, Units)) %>%
spread(`Indicator (road vehicles)`, Value)
# retain card numbers of all people
Cards <- Cards %>%
select(-c(Measurement, Units)) %>%
spread(Age, Value) %>%
select(-`60 years and over`) %>%
rename(Cards = All)
Network <- Network %>%
select(-c(Measurement, Units)) %>%
spread(`Indicator (road network traffic)`, Value)
Purposes <- Purposes %>%
select(-c(Measurement, Units)) %>%
spread(`Indicator (travel to work)`, Value)
# merge all dataset into one complete dataset by 'FeatureCode' and 'DateCode'
Data <- Expenditure %>%
left_join(Casualties,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Cards,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Network,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Purposes,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Transport,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Vehicles,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
)
# rename variables
names(Data) <- c(
"FeatureCode", "DateCode", "Expenditure", "Killed_Injured",
"Cards", "Congestion", "Repair", "Mileage", "Work_Bus",
"Business", "School", "Commuting", "Work_Cycling", "Education",
"Health", "Shopping", "Work_Train", "Work_Walking", "Train_Stations",
"Satisfaction", "One_Car", "More_Car", "Without_Car", "Petrol_Diesel"
)
glimpse(Data)
# Transform the DateCode as a factor
Data$DateCode <- as.factor(Data$DateCode)
my_skim <- skim_with()
my_skim(Data[, -c(1,2)])  %>%
select(c(skim_variable, numeric.mean, numeric.sd, numeric.p0, numeric.p100)) %>%
mutate(numeric.mean = round(numeric.mean,2), numeric.sd = round(numeric.sd,2)) %>%
kable(col.names = c("Variable", "Mean", "SD", "min", "max"))
corr <- cor(na.omit(Data[, -c(1, 2)]))
x <- rep(names(Data[, -c(1, 2)]))
y <- rep(names(Data[, -c(1, 2)]))
corrplot <- expand.grid(X = x, Y = y)
corrplot$Z <- c(corr)
ggplot(corrplot, aes(X, Y, fill = Z)) +
geom_tile(aes(fill = Z, alpha = 0.7), show.legend = FALSE) +
geom_text(aes(label = round(Z, 2)), size = 1.5) +
scale_fill_gradient2(
low = muted("#80C687"),
mid = "white",
high = muted("#FF4500"),
midpoint = 0,
breaks = c(-1, 0, 1), labels = c(-1, 0, 1),
limits = c(-1, 1)
) +
theme(
axis.text.x = element_text(
angle = 30,
vjust = .8,
hjust = 0.8
),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
library(tidyverse)
library(moderndive)
library(skimr)
library(kableExtra)
library(gridExtra)
library(fs)
library(tidymodels)
library(GGally)
library(car)
library(gvlma)
library(skimr)
library(kableExtra)
# set data path
data_dir <- "data"
# read data document name
csv_files <- fs::dir_ls(data_dir, regexp = "\\.csv$")
# dataset name
dataset_name <- c(
"Casualties", "Expenditure", "Transport",
"Vehicles", "Cards", "Network", "Purposes"
)
# read data and assign names to dataset
for (i in 1:7) {
assign(dataset_name[i], readr::read_csv(csv_files[i]))
}
#### data wrangling ####
# select total number of casualty outcomes
Casualties <- Casualties %>%
select(-c(Measurement, Units)) %>%
filter(Outcome == "Killed Or Seriously Injured") %>%
spread(Outcome, Value) %>%
filter(Age == "All" & Gender == "All") %>%
select(-c(Age, Gender))
# rename variable name
Expenditure <- Expenditure %>%
select(-c(Measurement, Units)) %>%
rename(Expenditure = Value)
# remove variables at the whole Scotland level
Transport <- Transport %>%
select(-c(Measurement, Units)) %>%
filter(`Indicator (public transport)` %in% c(
"Number Of Passenger Train Stations",
"Percentage Of Adults Reporting that they are Very or Fairly Satisfied with Public Transport"
)) %>%
spread(`Indicator (public transport)`, Value)
Vehicles <- Vehicles %>%
select(-c(Measurement, Units)) %>%
spread(`Indicator (road vehicles)`, Value)
# retain card numbers of all people
Cards <- Cards %>%
select(-c(Measurement, Units)) %>%
spread(Age, Value) %>%
select(-`60 years and over`) %>%
rename(Cards = All)
Network <- Network %>%
select(-c(Measurement, Units)) %>%
spread(`Indicator (road network traffic)`, Value)
Purposes <- Purposes %>%
select(-c(Measurement, Units)) %>%
spread(`Indicator (travel to work)`, Value)
# merge all dataset into one complete dataset by 'FeatureCode' and 'DateCode'
Data <- Expenditure %>%
left_join(Casualties,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Cards,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Network,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Purposes,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Transport,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Vehicles,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
)
# rename variables
names(Data) <- c(
"FeatureCode", "DateCode", "Expenditure", "Killed_Injured",
"Cards", "Congestion", "Repair", "Mileage", "Work_Bus",
"Business", "School", "Commuting", "Work_Cycling", "Education",
"Health", "Shopping", "Work_Train", "Work_Walking", "Train_Stations",
"Satisfaction", "One_Car", "More_Car", "Without_Car", "Petrol_Diesel"
)
glimpse(Data)
# Transform the DateCode as a factor
Data$DateCode <- as.factor(Data$DateCode)
# set data path
data_dir <- "data"
# read data document name
csv_files <- fs::dir_ls(data_dir, regexp = "\\.csv$")
# dataset name
dataset_name <- c(
"Casualties", "Expenditure", "Transport",
"Vehicles", "Cards", "Network", "Purposes"
)
# read data and assign names to dataset
for (i in 1:7) {
assign(dataset_name[i], readr::read_csv(csv_files[i]))
}
#### data wrangling ####
# select total number of casualty outcomes
Casualties <- Casualties %>%
select(-c(Measurement, Units)) %>%
filter(Outcome == "Killed Or Seriously Injured") %>%
spread(Outcome, Value) %>%
filter(Age == "All" & Gender == "All") %>%
select(-c(Age, Gender))
# rename variable name
Expenditure <- Expenditure %>%
select(-c(Measurement, Units)) %>%
rename(Expenditure = Value)
# remove variables at the whole Scotland level
Transport <- Transport %>%
select(-c(Measurement, Units)) %>%
filter(`Indicator (public transport)` %in% c(
"Number Of Passenger Train Stations",
"Percentage Of Adults Reporting that they are Very or Fairly Satisfied with Public Transport"
)) %>%
spread(`Indicator (public transport)`, Value)
Vehicles <- Vehicles %>%
select(-c(Measurement, Units)) %>%
spread(`Indicator (road vehicles)`, Value)
# retain card numbers of all people
Cards <- Cards %>%
select(-c(Measurement, Units)) %>%
spread(Age, Value) %>%
select(-`60 years and over`) %>%
rename(Cards = All)
Network <- Network %>%
select(-c(Measurement, Units)) %>%
spread(`Indicator (road network traffic)`, Value)
Purposes <- Purposes %>%
select(-c(Measurement, Units)) %>%
spread(`Indicator (travel to work)`, Value)
# merge all dataset into one complete dataset by 'FeatureCode' and 'DateCode'
Data <- Expenditure %>%
left_join(Casualties,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Cards,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Network,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Purposes,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Transport,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
) %>%
left_join(Vehicles,
by = c(
"FeatureCode" = "FeatureCode",
"DateCode" = "DateCode"
)
)
# rename variables
names(Data) <- c(
"FeatureCode", "DateCode", "Expenditure", "Killed_Injured",
"Cards", "Congestion", "Repair", "Mileage", "Work_Bus",
"Business", "School", "Commuting", "Work_Cycling", "Education",
"Health", "Shopping", "Work_Train", "Work_Walking", "Train_Stations",
"Satisfaction", "One_Car", "More_Car", "Without_Car", "Petrol_Diesel"
)
glimpse(Data)
# Transform the DateCode as a factor
Data$DateCode <- as.factor(Data$DateCode)
my_skim <- skim_with()
my_skim(Data[, -c(1,2)])  %>%
select(c(skim_variable, numeric.mean, numeric.sd, numeric.p0, numeric.p100)) %>%
mutate(numeric.mean = round(numeric.mean,2), numeric.sd = round(numeric.sd,2)) %>%
kable(col.names = c("Variable", "Mean", "SD", "min", "max"))
corr <- cor(na.omit(Data[, -c(1, 2)]))
x <- rep(names(Data[, -c(1, 2)]))
y <- rep(names(Data[, -c(1, 2)]))
corrplot <- expand.grid(X = x, Y = y)
corrplot$Z <- c(corr)
ggplot(corrplot, aes(X, Y, fill = Z)) +
geom_tile(aes(fill = Z, alpha = 0.7), show.legend = FALSE) +
geom_text(aes(label = round(Z, 2)), size = 1.5) +
scale_fill_gradient2(
low = muted("#80C687"),
mid = "white",
high = muted("#FF4500"),
midpoint = 0,
breaks = c(-1, 0, 1), labels = c(-1, 0, 1),
limits = c(-1, 1)
) +
theme(
axis.text.x = element_text(
angle = 30,
vjust = .8,
hjust = 0.8
),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
my_skim <- skim_with()
glimpse(Data)
