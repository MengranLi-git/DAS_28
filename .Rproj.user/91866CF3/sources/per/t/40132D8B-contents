---
title: Generate Reproducible & Live HTML and PDF Conference Posters Using RMarkdown
author:
  - name: Brent Thorne
    affil: 1
  - name: Another G. Author
    affil: 2
affiliation:
  - num: 1
    address: Department of Mathmatics & Statistics, University of Glasgow
column_numbers: 3
logoright_name: "Poster_files/figure-html/UoG_keyline.png"
logoleft_name: "Poster_files/figure-html/UoG_keyline.png"
output: 
  posterdown::posterdown_html:
    self_contained: false
bibliography: packages.bib
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
```

```{r}
library(tidyverse)
library(fs)
library(tidymodels)
library(GGally)
library(car)
library(gvlma)
library(skimr)
library(kableExtra)

load("../Data.Rdata")
```

# Introduction

Welcome to `posterdown` ! This is my attempt to provide a semi-smooth workflow for those who wish to take their R Markdown skills to the conference world. Most features from R Markdown are available in this package such as Markdown section notation, figure captioning, and even citations like this one [@R-rmarkdown]. The rest of this example poster will show how you can insert typical conference poster features into your own document. 

## Objectives

1. Easy to use reproducible poster design. 
2. Integration with R Markdown.
3. Easy transition from `posterdown` to `pagedown` report or manuscript documents [@R-pagedown].

# Methods

This package uses the same workflow approach as the R Markdown you know and love. Basically it goes from RMarkdown > Knitr > Markdown > Pandoc > HTML/CSS > PDF. You can even use the bibliography the same way [@R-posterdown].

# Results

```{r}
my_skim <- skim_with()

my_skim(Data[, -c(1,2)])  %>%
  select(c(skim_variable, numeric.mean, numeric.sd, numeric.p0, numeric.p100)) %>%
  mutate(numeric.mean = round(numeric.mean,2), numeric.sd = round(numeric.sd,2)) %>%
  kable(col.names = c("Variable", "Mean", "SD", "min", "max"))
```


```{r, out.width='100%'}
corr <- cor(na.omit(Data[, -c(1, 2)]))

x <- rep(names(Data[, -c(1, 2)]))
y <- rep(names(Data[, -c(1, 2)]))
corrplot <- expand.grid(X = x, Y = y)
corrplot$Z <- c(corr)

ggplot(corrplot, aes(X, Y, fill = Z)) +
  geom_tile(aes(fill = Z, alpha = 0.7), show.legend = FALSE) +
  geom_text(aes(label = round(Z, 2)), size = 1.5) +
  scale_fill_gradient2(
    low = muted("#80C687"),
    mid = "white",
    high = muted("#FF4500"),
    midpoint = 0,
    breaks = c(-1, 0, 1), labels = c(-1, 0, 1),
    limits = c(-1, 1)
  ) +
  theme(
    axis.text.x = element_text(
      angle = 30,
      vjust = .8,
      hjust = 0.8
    ),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )
```


```{r}
fit <- lm(Satisfaction ~ ., data = na.omit(Data[, -1]))
fit2 <- lm(Satisfaction ~ DateCode + Cards + Repair + Work_Bus + 
             School + Health + Work_Train + Train_Stations + Without_Car + 
             Petrol_Diesel, data = na.omit(Data[, -1]))
glance(fit) %>% 
  full_join(glance(fit2)) %>%
  select(adj.r.squared, AIC, BIC) %>% 
  add_column(model = c("model 1", "model 2"), .before = "adj.r.squared") %>%
  kable()
```

```{r, out.width='100%'}
boot_models <- bootstraps(Data[, -c(1, 3, 4, 8)], times = 1000, apparent = TRUE) %>%
  mutate(
    model = map(splits, ~ lm(Satisfaction ~ DateCode + Cards + Repair + Work_Bus + 
                               School + Health + Work_Train + Train_Stations + Without_Car + 
                               Petrol_Diesel, data = .)),
    coef_info = map(model, tidy)
  )

boot_coefs <- boot_models %>%
  unnest(coef_info)

ci <- int_pctl(boot_models, coef_info)
# significant at 0.05
sig <- ci[sign(ci[, 2]) == sign(ci[, 4]), ] %>% pull(term)

boot_coefs <-  boot_coefs %>%
  mutate(sig = ifelse(term %in% sig, "TRUE", "FALSE")) %>%
  filter(term %in% c("Health", "Petrol_Diesel","Repair", "School", "Train_Stations", "Without_Car", "Work_Bus", "Work_Train"))

boot_coefs2 <- boot_coefs %>%
  group_by(term) %>%
  summarise(est = median(estimate), lower = quantile(estimate, 0.025), upper = quantile(estimate, 0.975))

boot_coefs %>%
  ggplot() +
  geom_density(aes(estimate, fill = sig), alpha = 0.7,  color = "white") +
  geom_vline(data = boot_coefs2, mapping = aes(xintercept = est))+
  geom_vline(data = boot_coefs2, mapping = aes(xintercept = lower), color="Red", lty = 2)+
  geom_vline(data = boot_coefs2, mapping = aes(xintercept = upper), color="Red", lty = 2)+
  geom_vline(data = boot_coefs2, mapping = aes(xintercept = 0), color="Blue", lty = 2)+
  facet_wrap(~term, scales = "free")
```



# Next Steps

Aliquam sed faucibus risus, quis efficitur erat. Vestibulum semper mauris quis tempus eleifend. Aliquam sagittis dictum ipsum, quis viverra ligula eleifend ut. Curabitur sagittis vitae arcu eget faucibus. In non elementum felis. Duis et aliquam nunc. Nunc pulvinar sapien nunc, vel pretium nisi efficitur in. Fusce fringilla maximus leo et maximus. Fusce at ligula laoreet, iaculis mi at, auctor odio. Praesent sed elementum justo. Aenean consectetur risus rhoncus tincidunt efficitur. Praesent dictum mauris at diam maximus maximus [@R-posterdown].

# Conclusion

Try `posterdown` out! Hopefully you like it!

```{r, include=FALSE}
knitr::write_bib(c('knitr','rmarkdown','posterdown','pagedown'), 'packages.bib')
```

# References
